@page "/fetchdata"
@using FrontiersApp.Data
@inject NavigationManager _navigationManager
@inject UserService UserService

<PageTitle>Frontiers App</PageTitle>

<h1>Users</h1>

<p>Frontiers registered users</p>

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            @BodyText
        </div>
    </div>
</div>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Pubblications</th>
                <th>University</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.NumberOfPublications</td>
                    <td>@user.UniversityName</td>
                    <td>@user.Reviewer</td>
                    @if(!user.Reviewer)
                    {
                        <td><button class="btn btn-primary" onclick="@OpenForm(user.Id);">Click me</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private UserModel[] users;
  
    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetRegisteredUsersAsync();
    }

    private async Task OpenForm(int id)
    {
        var result = await UserService.InviteReviewer(id);
        Show(result, "Reviewer");
        NavigateToYourUrl();
    }

    void NavigateToYourUrl()
    {
        _navigationManager.NavigateTo("/fetchdata", true);
    }


    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public void Show(string bodyText, string headerText = "")
    {
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }
}